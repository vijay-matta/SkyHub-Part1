// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkyHub.Data;

#nullable disable

namespace SkyHub.Migrations
{
    [DbContext(typeof(SkyHubDbContext))]
    [Migration("20241125083517_firstdb")]
    partial class firstdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SkyHub.Models.Flight_Details.BaggageInfos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CabinWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CheckinWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExcessBaggageRate")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId")
                        .IsUnique();

                    b.ToTable("BaggageInfo", "Flight_Details");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.BookingItems", b =>
                {
                    b.Property<int>("BookingItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingItemId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("SeatTypeId")
                        .HasColumnType("int");

                    b.HasKey("BookingItemId");

                    b.HasIndex("BookingId");

                    b.HasIndex("SeatId");

                    b.HasIndex("SeatTypeId");

                    b.ToTable("BookingItems", "Flight_Details");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Bookings", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("NumSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings", "Flight_Details");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Flights", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<decimal>("Fare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FlightName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("FlightOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("FlightOwnerId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsRoundTrip")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<int?>("ReturnFlightId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("ReturnTime")
                        .HasColumnType("time");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("FlightId");

                    b.HasIndex("FlightNumber")
                        .IsUnique();

                    b.HasIndex("FlightOwnerId");

                    b.HasIndex("FlightOwnerId1");

                    b.HasIndex("ReturnFlightId");

                    b.HasIndex("RouteId");

                    b.ToTable("Flights", "Flight_Details");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Routes", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("FlightOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RouteId");

                    b.HasIndex("FlightOwnerId");

                    b.ToTable("Routes", "Flight_Details");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.SeatTypes", b =>
                {
                    b.Property<int>("SeatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatTypeId"));

                    b.Property<decimal>("BaseFare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeatTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SeatTypeId");

                    b.ToTable("SeatTypes", "Flight_Details");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Seats", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SeatTypeId")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("FlightId");

                    b.HasIndex("SeatNumber")
                        .IsUnique();

                    b.HasIndex("SeatTypeId");

                    b.ToTable("Seats", "Flight_Details");
                });

            modelBuilder.Entity("SkyHub.Models.Payment_Details.Payments", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Payments", "Payment_Details");
                });

            modelBuilder.Entity("SkyHub.Models.Payment_Details.Refunds", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"));

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefundMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RefundId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("Refunds", "Payment_Details");
                });

            modelBuilder.Entity("SkyHub.Models.Roles.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admin", "Roles");
                });

            modelBuilder.Entity("SkyHub.Models.Roles.FlightOwner", b =>
                {
                    b.Property<int>("FlightOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightOwnerId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FlightOwnerId");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("FlightOwner", "Roles");
                });

            modelBuilder.Entity("SkyHub.Models.Roles.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PassengerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Passenger", "Roles");
                });

            modelBuilder.Entity("SkyHub.Models.Roles.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "Roles");

                    b
                        .HasAnnotation("Relational:CheckConstraint:CHK_Users_Email", "[Email] LIKE '%@%'")
                        .HasAnnotation("Relational:CheckConstraint:CHK_Users_Password", "[PasswordHash] LIKE '%[A-Z]%' AND [PasswordHash] LIKE '%[0-9]%' AND [PasswordHash] LIKE '%[^a-zA-Z0-9]%' AND LEN([PasswordHash]) >= 8");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.BaggageInfos", b =>
                {
                    b.HasOne("SkyHub.Models.Flight_Details.Flights", "Flight")
                        .WithOne("BaggageInfo")
                        .HasForeignKey("SkyHub.Models.Flight_Details.BaggageInfos", "FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.BookingItems", b =>
                {
                    b.HasOne("SkyHub.Models.Flight_Details.Bookings", "Booking")
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkyHub.Models.Flight_Details.Seats", "Seat")
                        .WithMany("BookingItems")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SkyHub.Models.Flight_Details.SeatTypes", "SeatType")
                        .WithMany("BookingItems")
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Seat");

                    b.Navigation("SeatType");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Bookings", b =>
                {
                    b.HasOne("SkyHub.Models.Flight_Details.Flights", "Flight")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkyHub.Models.Roles.Users", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Flights", b =>
                {
                    b.HasOne("SkyHub.Models.Roles.FlightOwner", "FlightOwner")
                        .WithMany()
                        .HasForeignKey("FlightOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkyHub.Models.Roles.FlightOwner", null)
                        .WithMany("Flights")
                        .HasForeignKey("FlightOwnerId1");

                    b.HasOne("SkyHub.Models.Flight_Details.Flights", "ReturnFlight")
                        .WithMany()
                        .HasForeignKey("ReturnFlightId");

                    b.HasOne("SkyHub.Models.Flight_Details.Routes", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FlightOwner");

                    b.Navigation("ReturnFlight");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Routes", b =>
                {
                    b.HasOne("SkyHub.Models.Roles.FlightOwner", "FlightOwner")
                        .WithMany("Route")
                        .HasForeignKey("FlightOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightOwner");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Seats", b =>
                {
                    b.HasOne("SkyHub.Models.Flight_Details.Flights", "Flight")
                        .WithMany("Seats")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkyHub.Models.Flight_Details.SeatTypes", "SeatType")
                        .WithMany("Seats")
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("SeatType");
                });

            modelBuilder.Entity("SkyHub.Models.Payment_Details.Payments", b =>
                {
                    b.HasOne("SkyHub.Models.Flight_Details.Bookings", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("SkyHub.Models.Payment_Details.Payments", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SkyHub.Models.Payment_Details.Refunds", b =>
                {
                    b.HasOne("SkyHub.Models.Payment_Details.Payments", "Payment")
                        .WithOne("Refund")
                        .HasForeignKey("SkyHub.Models.Payment_Details.Refunds", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("SkyHub.Models.Roles.Admin", b =>
                {
                    b.HasOne("SkyHub.Models.Roles.Users", "User")
                        .WithOne("Admin")
                        .HasForeignKey("SkyHub.Models.Roles.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkyHub.Models.Roles.FlightOwner", b =>
                {
                    b.HasOne("SkyHub.Models.Roles.Users", "User")
                        .WithOne("FlightOwner")
                        .HasForeignKey("SkyHub.Models.Roles.FlightOwner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkyHub.Models.Roles.Passenger", b =>
                {
                    b.HasOne("SkyHub.Models.Roles.Users", "User")
                        .WithOne("Customer")
                        .HasForeignKey("SkyHub.Models.Roles.Passenger", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Bookings", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Flights", b =>
                {
                    b.Navigation("BaggageInfo")
                        .IsRequired();

                    b.Navigation("Bookings");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Routes", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.SeatTypes", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("SkyHub.Models.Flight_Details.Seats", b =>
                {
                    b.Navigation("BookingItems");
                });

            modelBuilder.Entity("SkyHub.Models.Payment_Details.Payments", b =>
                {
                    b.Navigation("Refund")
                        .IsRequired();
                });

            modelBuilder.Entity("SkyHub.Models.Roles.FlightOwner", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("SkyHub.Models.Roles.Users", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Bookings");

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("FlightOwner")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
